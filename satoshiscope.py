"""
SatoshiScope: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ UTXO.
"""

import requests
import argparse

def get_utxo_chain(txid, vout_index):
    visited = set()
    chain = []

    current_txid = txid
    current_vout = vout_index

    while True:
        key = f"{current_txid}:{current_vout}"
        if key in visited:
            break
        visited.add(key)

        # –ü–æ–ª—É—á–∞–µ–º tx
        url = f"https://api.blockchair.com/bitcoin/raw/transaction/{current_txid}"
        r = requests.get(url)
        if r.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {current_txid}")
            break

        tx = r.json()["data"][current_txid]["decoded_raw_transaction"]
        outputs = tx["vout"]
        if current_vout >= len(outputs):
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤—ã—Ö–æ–¥–∞.")
            break

        output = outputs[current_vout]
        value = output["value"]
        addresses = output.get("script_pub_key", {}).get("addresses", ["N/A"])
        chain.append({
            "txid": current_txid,
            "vout": current_vout,
            "value": value,
            "address": addresses[0],
        })

        # –¢–µ–ø–µ—Ä—å –∏—â–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç UTXO –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
        url2 = f"https://api.blockchair.com/bitcoin/dashboards/output/{current_txid}:{current_vout}"
        r2 = requests.get(url2)
        if r2.status_code != 200:
            print("‚úÖ UTXO –Ω–µ –±—ã–ª –ø–æ—Ç—Ä–∞—á–µ–Ω (–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±–æ—Ä–æ—Ç–µ).")
            break
        spent_info = r2.json()["data"].get(f"{current_txid}:{current_vout}", {}).get("spent_by", None)
        if not spent_info:
            print("‚úÖ UTXO –Ω–µ –ø–æ—Ç—Ä–∞—á–µ–Ω.")
            break

        current_txid = spent_info["transaction_hash"]
        current_vout = spent_info["index"]

    return chain

def print_chain(chain):
    print("üîé –¶–µ–ø–æ—á–∫–∞ UTXO:")
    for i, link in enumerate(chain):
        print(f"{i+1}. TXID: {link['txid']} (vout {link['vout']}) ‚Äî {link['value']} BTC ‚Üí {link['address']}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="SatoshiScope ‚Äî –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ UTXO.")
    parser.add_argument("txid", help="TXID")
    parser.add_argument("vout", type=int, help="VOUT index")
    args = parser.parse_args()
    chain = get_utxo_chain(args.txid, args.vout)
    print_chain(chain)
